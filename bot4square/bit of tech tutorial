



http://bitoftech.net/2014/01/13/building-spa-using-angularjs-part-2/
Building SPA using AngularJS – Part 2

previous post we have done all work needed to bootstrap our app with Angular, now we’ll focus on implementing the use cases... I will start building those requirements from bottom to top, so we’ll start by services then we move up to the view.

Step 1: Adding service to communicate with Foursquare API:
Step 2: Implementing business logic in controller:
Step 3: Adding custom filter:
Step 4: Modifying Places Results View:
Step 5: Add modal view to view places images




Step 1: Adding service to communicate with Foursquare API:


services in Angular are singleton objects responsible of doing certain tasks, or they can be used for sharing business logic. To use those custom created services we just need to specify service name in controller, filters, directive, etc… and Angular will inject those singleton objects. Angular is built in a way that it will be able to manage those custom created services so we can use them any place in our app.
There are different ways to create Angular Services, two of them are Service or Factory methods, both will provide us with a singleton shared object, and the only difference is how they are created, I won’t dig more into differences and we’ll use Factory for creating Services. You can read this informative stackoverflow question which highlights the differences.

So let’s add new JS file named “placesExplorerService.js” to the folder “app–>services”, this service will be responsible to send HTTP requests to Foursquare explore places API. For more information about Foursquare explore places API and how you can get your own clientID and secret you can check the official documentation.


Step 2: Implementing business logic in controller:


part 2 step 2 start implementing the functions and model needed to interact with our view “placesresults.html”, if you are following from the previous post, we’ve already created a controller named “placesExplorerController” with a single model (exploreNearby), now we need to expand the models and functions needed to build the app, I’ll paste most of the controller code below and will explain what is going in the next paragraph:


see service js file

Now we need to add the filter which will allow users to filter results returned, we’ll be filtering by Place Name or Place Category.

Step 3: Adding custom filter:

To define a custom filter we need to add new JS file named “placeNameCategoryFilter.js” to the folder “app–>filters”, open the file and paste the code below:


-----------------------------------------------------------------------------


Building SPA using AngularJS – Part 1


http://bitoftech.net/2014/01/13/building-spa-using-angularjs-part-1/

Step 1: Downloading third party libraries
Step 2: Organizing your project structure
	http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript
Step 3: Adding the shell page:
Step 4: “Booting up” our application
Step 5: Configuring AngularJS Routes
Step 6: Adding our first controller and view

	By looking at the code snippet above you will notice that we used directive called “ng-model”, this directive is responsible for the two-way data binding, in simple words; we’ve bind the text input to the model “exploreNearby” so if the value of the text input has changed, thne the value of the model will be changed and vise verse. Notice how we do not use “$scope” object when we reference the model in the html, using the double curly brackets {{}} is the right way to reference model in the DOM elements i.e. {{exploreNearBy}}.

Step 7: Wiring “FourSquareApp” module to our App



In the next post we’ll start implementing the real business logic in this controller, make RESTful calls to foursquare API using angular services, and project the data in the view in a neat way.


index.html = the “Single Page” which is a container for our application, it will contain the navigation menu and Angular directive for rendering different application views “pages” using JS without the need to download new page from the server (thereby gaining performance because we are not downloading new HTML page each time the user navigating to a new page.) 

After adding the “index.html” page we need to reference the 3rd party JavaScript and CSS files needed as the below:


TIL - lots of opionions on how to friggin organize angular files

http://briantford.com/blog/huuuuuge-angular-apps.html
http://joshdmiller.github.io/ng-boilerplate/#/home


Step 4: “Booting up” our application

“app.js” =  file is responsible to create modules in applications, in our case we’ll have a single module called “FoursquareApp”, we can consider module as collection of services, directives, filters which is used in the application. Each module has configuration block where it gets applied to the application during the bootstrap process.

Step 5: Configuring AngularJS Routes

Our application will have three different views: (For now you can think about them as pages),

View for displaying search results mapped to route (URL) “/explore“.
View for displaying user bookmarked places mapped to route (URL) ”/places“.
View for about page mapped to route (URL) ”/about“.



Step 7: Wiring “FourSquareApp” module to our App

This is the most forgotten step that usually devs fall into, we need to tell Angular in which part of our application should be active, we can have Mini-SPA i.e. part of the application is SPA and other parts are traditional client/server request. But in our case we want the entire application to use Angular, so the right place to add the directive “ng-app” is on html tag of the shell page “index.html”, it will look at the code snippet below: